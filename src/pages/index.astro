---
import Welcome from '../components/Welcome.astro';
import Layout from '../layouts/Layout.astro';
import InventoryList from '../components/inventory/InventoryList.astro';
import Notifications from '../components/inventory/Notifications.astro';
import RecipeList from '../components/recipes/RecipeList.astro';
import ShoppingList from '../components/shopping/ShoppingList.astro';
import { getAllFoodItems } from '../lib/db';
import { query } from '../lib/db';

const items = await getAllFoodItems();
const uniqueNames = [...new Set(items.map(item => item.name))];

// Load section order for user (user_id = 1 for demo)
let sectionOrder = [
  'notifications',
  'inventory',
  'recipes',
  'shopping',
];
try {
  const { rows } = await query('SELECT section_order FROM user_section_order WHERE user_id = $1', [1]);
  if (rows.length && rows[0].section_order) {
    sectionOrder = JSON.parse(rows[0].section_order);
  }
} catch (e) {
  // fallback to default order
}
---
<Layout>
	<main class="container mx-auto p-4">
    <div id="draggable-lists">
      {sectionOrder.map(section => {
        if (section === 'notifications') {
          return <section class="mb-6" data-list="notifications"><Notifications /></section>;
        } else if (section === 'inventory') {
          return <section class="mb-6" data-list="inventory"><InventoryList items={items} uniqueNames={uniqueNames} /></section>;
        } else if (section === 'recipes') {
          return <section class="mb-6" data-list="recipes"><RecipeList /></section>;
        } else if (section === 'shopping') {
          return <section data-list="shopping"><ShoppingList /></section>;
        } else {
          return null;
        }
      })}
    </div>
    <pre class="bg-yellow-100 text-xs p-2 mb-2 rounded border border-yellow-300">DEBUG: sectionOrder = {JSON.stringify(sectionOrder)}</pre>
	</main>
  <script is:client>
    // Simple drag-and-drop for reordering sections
    const container = document.getElementById('draggable-lists');
    let dragged = null;
    function getSectionOrder() {
      return Array.from(container.querySelectorAll('section'))
        .map(s => s.getAttribute('data-list'))
        .filter(Boolean); // Remove null/undefined/empty
    }
    function saveSectionOrder() {
      const order = getSectionOrder();
      fetch('/api/section-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ order }),
      })
      .then(res => res.json())
      .catch(err => {
        console.error('Section order save error:', err);
      });
    }
    container.querySelectorAll('section').forEach(section => {
      section.setAttribute('draggable', 'true');
      section.addEventListener('dragstart', (e) => {
        dragged = section;
        section.style.opacity = '0.5';
      });
      section.addEventListener('dragend', (e) => {
        section.style.opacity = '';
        dragged = null;
      });
      section.addEventListener('dragover', (e) => {
        e.preventDefault();
      });
      section.addEventListener('drop', (e) => {
        e.preventDefault();
        if (dragged && dragged !== section) {
          if (section.parentElement === container) {
            // If dropping on the topmost section, insert before
            if (section === container.firstElementChild) {
              container.insertBefore(dragged, section);
            } else {
              container.insertBefore(dragged, section.nextSibling);
            }
            saveSectionOrder();
          }
        }
      });
    });
    // Special: drag shopping list to top if dropped on top
    const shoppingSection = container.querySelector('section[data-list="shopping"]');
    if (shoppingSection) {
      shoppingSection.addEventListener('dragend', () => {
        if (shoppingSection.parentElement.firstElementChild !== shoppingSection) {
          // If dropped at top, move to top
          container.insertBefore(shoppingSection, container.firstElementChild);
          saveSectionOrder();
        }
      });
    }
  </script>
</Layout>
