---
const { items = [], uniqueNames = [] } = Astro.props;
---
<section class="p-4">
  <h2 class="text-2xl font-bold mb-4">Inventory</h2>
  <form id="add-item-form" class="mb-6 flex flex-wrap gap-2 items-end bg-gray-50 p-4 rounded shadow">
    <div class="relative">
      <select id="name-select" class="border rounded px-2 py-1 pr-8" style="min-width: 120px;" tabindex="1">
        <option value="">Select food...</option>
        {uniqueNames.map(name => <option value={name}>{name}</option>)}
        <option value="__custom__">Other (type manually)</option>
      </select>
      <input name="name" id="name-input" type="text" placeholder="Name" required class="border rounded px-2 py-1 absolute left-0 top-0 w-full hidden" style="min-width: 120px;" tabindex="1" />
    </div>
    <input name="quantity" id="quantity-input" type="number" placeholder="Quantity" required class="border rounded px-2 py-1" />
    <select name="location" required class="border rounded px-2 py-1">
      <option value="">Location</option>
      <option value="Pantry">Pantry</option>
      <option value="Refrigerator">Refrigerator</option>
      <option value="Freezer">Freezer</option>
    </select>
    <input id="expiration-date-input" name="expiration_date" type="date" required class="border rounded px-2 py-1" />
    <input type="hidden" name="user_id" value="1" />
    <button type="submit" class="bg-blue-600 text-white px-4 py-1 rounded">Add</button>
    <span id="add-item-message" class="ml-4 text-sm"></span>
  </form>
  <div id="inventory-table-wrapper">
    <table class="min-w-full bg-white border border-gray-200 rounded-lg">
      <thead>
        <tr class="bg-gray-100">
          <th class="py-2 px-4 text-left">
            Name
            <button class="sort-btn" data-key="name" data-dir="asc" aria-label="Sort ascending" tabindex="0">▲</button>
            <button class="sort-btn" data-key="name" data-dir="desc" aria-label="Sort descending" tabindex="0">▼</button>
          </th>
          <th class="py-2 px-4 text-left">
            Quantity
            <button class="sort-btn" data-key="quantity" data-dir="asc" aria-label="Sort ascending" tabindex="0">▲</button>
            <button class="sort-btn" data-key="quantity" data-dir="desc" aria-label="Sort descending" tabindex="0">▼</button>
          </th>
          <th class="py-2 px-4 text-left">
            Location
            <button class="sort-btn" data-key="location" data-dir="asc" aria-label="Sort ascending" tabindex="0">▲</button>
            <button class="sort-btn" data-key="location" data-dir="desc" aria-label="Sort descending" tabindex="0">▼</button>
          </th>
          <th class="py-2 px-4 text-left">
            Expiration
            <button class="sort-btn" data-key="expiration_date" data-dir="asc" aria-label="Sort ascending" tabindex="0">▲</button>
            <button class="sort-btn" data-key="expiration_date" data-dir="desc" aria-label="Sort descending" tabindex="0">▼</button>
          </th>
          <th class="py-2 px-4"></th>
        </tr>
      </thead>
      <tbody id="inventory-table-body">
        {Array.isArray(items) && items.length === 0 ? (
          <tr><td colspan="5" class="text-center py-4">No items found.</td></tr>
        ) : (
          Array.isArray(items) && items.map(item => {
            let exp = '';
            if (item && item.expiration_date) {
              if (typeof item.expiration_date === 'string') {
                exp = item.expiration_date.split('T')[0];
              } else if (item.expiration_date instanceof Date) {
                exp = item.expiration_date.toISOString().split('T')[0];
              } else {
                exp = String(item.expiration_date).slice(0, 10);
              }
            }
            return (
              <tr class="border-t" key={item.item_id}>
                <td class="py-2 px-4">{item.name}</td>
                <td class="py-2 px-4">{item.quantity}</td>
                <td class="py-2 px-4">{item.location}</td>
                <td class="py-2 px-4">{exp}</td>
                <td class="py-2 px-4">
                  <form class="remove-item-form" data-id={item.item_id} style="display:inline">
                    <button type="submit" class="text-red-600 hover:underline">Remove</button>
                  </form>
                </td>
              </tr>
            );
          })
        )}
      </tbody>
    </table>
    <div class="flex justify-center mt-4" id="inventory-paginator">
      <button id="prev-page" class="px-3 py-1 mx-1 rounded bg-gray-200 text-gray-700 disabled:opacity-50" disabled>Previous</button>
      <span id="page-indicator" class="px-3 py-1 mx-1"></span>
      <button id="next-page" class="px-3 py-1 mx-1 rounded bg-gray-200 text-gray-700 disabled:opacity-50">Next</button>
    </div>
  </div>
</section>
<script is:client>
// Get initial items from the server-rendered table rows
let allItems = [];
const tableRows = document.querySelectorAll('#inventory-table-body tr');
tableRows.forEach(row => {
  const cells = row.querySelectorAll('td');
  if (cells.length >= 5) {
    allItems.push({
      name: cells[0].textContent.trim(),
      quantity: cells[1].textContent.trim(),
      location: cells[2].textContent.trim(),
      expiration_date: cells[3].textContent.trim(),
      item_id: row.getAttribute('key') || row.dataset.id || Math.random().toString(36).slice(2)
    });
  }
});
let currentPage = 1;
const pageSize = 10;

function attachDateInputHotkeys() {
  const dateInput = document.getElementById('expiration-date-input');
  if (dateInput && !dateInput._hotkeysAttached) {
    dateInput.addEventListener('keydown', (e) => {
      const input = e.target;
      const today = new Date();
      function formatDate(d) {
        return d.toISOString().slice(0, 10);
      }
      let d = input.value ? new Date(input.value) : today;
      if (e.key === 't' || e.key === 'T') {
        input.value = formatDate(today);
        e.preventDefault();
      } else if (e.key === 'l' || e.key === 'L') {
        d.setDate(d.getDate() + 1);
        input.value = formatDate(d);
        e.preventDefault();
      } else if (e.key === 'j' || e.key === 'J') {
        d.setDate(d.getDate() - 1);
        input.value = formatDate(d);
        e.preventDefault();
      } else if (e.key === 'i' || e.key === 'I') {
        d.setMonth(d.getMonth() + 1);
        input.value = formatDate(d);
        e.preventDefault();
      } else if (e.key === 'u' || e.key === 'U') {
        d.setMonth(d.getMonth() - 1);
        input.value = formatDate(d);
        e.preventDefault();
      } else if (e.key === ',') {
        d.setFullYear(d.getFullYear() + 1);
        input.value = formatDate(d);
        e.preventDefault();
      } else if (e.key === 'm' || e.key === 'M') {
        d.setFullYear(d.getFullYear() - 1);
        input.value = formatDate(d);
        e.preventDefault();
      }
    });
    dateInput._hotkeysAttached = true;
  }
}

function attachRemoveHandlers() {
  document.querySelectorAll('.remove-item-form').forEach(form => {
    form.onsubmit = async (e) => {
      e.preventDefault();
      const id = form.getAttribute('data-id');
      const fd = new FormData();
      fd.append('delete_id', id);
      const res = await fetch('/api/food-items', {
        method: 'POST',
        body: fd,
      });
      if (res.ok) {
        // Remove from allItems and re-render
        allItems = allItems.filter(item => String(item.item_id) !== String(id));
        const totalPages = Math.ceil(allItems.length / pageSize);
        if (currentPage > totalPages) currentPage = totalPages || 1;
        renderInventoryPage(currentPage);
        updatePaginator();
      } else {
        alert('Failed to remove item.');
      }
    };
  });
}

// Call this after every render
function renderInventoryPage(page) {
  const tbody = document.getElementById('inventory-table-body');
  if (!tbody) return;
  const start = (page - 1) * pageSize;
  const end = start + pageSize;
  const pagedItems = allItems.slice(start, end);
  tbody.innerHTML = pagedItems.length === 0
    ? '<tr><td colspan="5" class="text-center py-4">No items found.</td></tr>'
    : pagedItems.map(item => {
        let exp = '';
        if (item && item.expiration_date) {
          if (typeof item.expiration_date === 'string') {
            exp = item.expiration_date.split('T')[0];
          } else if (item.expiration_date instanceof Date) {
            exp = item.expiration_date.toISOString().split('T')[0];
          } else {
            exp = String(item.expiration_date).slice(0, 10);
          }
        }
        return `
          <tr class="border-t" key="${item.item_id}">
            <td class="py-2 px-4">${item.name}</td>
            <td class="py-2 px-4">${item.quantity}</td>
            <td class="py-2 px-4">${item.location}</td>
            <td class="py-2 px-4">${exp}</td>
            <td class="py-2 px-4">
              <form class="remove-item-form" data-id="${item.item_id}" style="display:inline">
                <button type="submit" class="text-red-600 hover:underline">Remove</button>
              </form>
            </td>
          </tr>
        `;
      }).join('');
  // After rendering, re-attach hotkeys
  attachDateInputHotkeys();
  attachRemoveHandlers();
}

function updatePaginator() {
  const pageIndicator = document.getElementById('page-indicator');
  const prevBtn = document.getElementById('prev-page');
  const nextBtn = document.getElementById('next-page');
  const paginator = document.getElementById('inventory-paginator');
  const totalPages = Math.ceil(allItems.length / pageSize);
  pageIndicator.textContent = `Page ${currentPage} of ${totalPages}`;
  prevBtn.disabled = currentPage === 1;
  nextBtn.disabled = currentPage === totalPages || totalPages === 0;

  // Remove old page buttons if any
  paginator.querySelectorAll('.page-btn').forEach(btn => btn.remove());
  // Insert new page buttons after prev/next
  for (let i = 1; i <= totalPages; i++) {
    const btn = document.createElement('button');
    btn.className = `px-2 py-1 mx-1 rounded page-btn ${i === currentPage ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'}`;
    btn.dataset.page = i;
    btn.textContent = i;
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      const page = parseInt(btn.dataset.page);
      if (page !== currentPage) {
        currentPage = page;
        renderInventoryPage(currentPage);
        updatePaginator();
      }
    });
    nextBtn.parentNode.insertBefore(btn, nextBtn);
  }
}

document.addEventListener('DOMContentLoaded', () => {
  renderInventoryPage(currentPage);
  updatePaginator();
  document.getElementById('prev-page').addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      renderInventoryPage(currentPage);
      updatePaginator();
    }
  });
  document.getElementById('next-page').addEventListener('click', () => {
    const totalPages = Math.ceil(allItems.length / pageSize);
    if (currentPage < totalPages) {
      currentPage++;
      renderInventoryPage(currentPage);
      updatePaginator();
    }
  });
  // Attach hotkeys on initial load
  attachDateInputHotkeys();

  // Name dropdown/select logic for required attribute
  const nameSelect = document.getElementById('name-select');
  const nameInput = document.getElementById('name-input');
  if (nameSelect && nameInput) {
    nameSelect.addEventListener('change', (e) => {
      if (nameSelect.value === '__custom__') {
        nameInput.classList.remove('hidden');
        nameInput.required = true;
        nameInput.value = '';
        nameInput.focus();
      } else if (nameSelect.value) {
        nameInput.classList.add('hidden');
        nameInput.required = false;
        nameInput.value = nameSelect.value;
      } else {
        nameInput.classList.add('hidden');
        nameInput.required = true;
        nameInput.value = '';
      }
    });
    // On form submit, ensure name input is set
    const addForm = document.getElementById('add-item-form');
    if (addForm) {
      addForm.addEventListener('submit', (e) => {
        if (nameSelect.value && nameSelect.value !== '__custom__') {
          nameInput.value = nameSelect.value;
        }
      });
    }
  }

  // Add debug for add-item-form
  const addForm = document.getElementById('add-item-form');
  if (addForm) {
    addForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const message = document.getElementById('add-item-message');
      message.textContent = '';
      const formData = new FormData(addForm);
      const quantityValue = formData.get('quantity');
      if (!quantityValue || isNaN(Number(quantityValue))) {
        alert('Quantity must be a number.');
        return;
      }
      const res = await fetch('/api/food-items', {
        method: 'POST',
        body: formData,
      });
      if (res.ok) {
        addForm.reset();
        message.textContent = 'Item added!';
        message.className = 'ml-4 text-green-600 text-lg font-bold transition-opacity duration-3000 opacity-100';
        setTimeout(() => {
          message.style.transition = 'opacity 3s';
          message.style.opacity = '0';
        }, 10000);
        setTimeout(() => {
          message.textContent = '';
          message.style.opacity = '1';
          message.className = 'ml-4 text-sm';
        }, 13000);
        // Refresh inventory list
        // Option 1: Fetch all items again (if API supports it)
        // Option 2: Add the new item to allItems and re-render
        // For now, just reload the page as a fallback
        // location.reload();
        // Option 2: Try to fetch and update client-side
        // (You can implement a fetchInventory function for this)
      } else {
        message.textContent = 'Error adding item.';
        message.className = 'ml-4 text-red-600 text-sm';
      }
    });
  }
});
</script>
